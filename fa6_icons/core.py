# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['svgs', 'dims', 'HtmlNotStr', 'SvgIcon']

# %% ../nbs/00_core.ipynb 2
from .icons import icons
from fastcore.utils import *

# %% ../nbs/00_core.ipynb 3
class HtmlNotStr(NotStr):
    "Behaves like a `str`, but isn't a `str`, and renders HTML in a notebook"
    def _repr_html_(self): return str(self)

# %% ../nbs/00_core.ipynb 4
def SvgIcon(icon, width:int=16, viewbox: str = "", cls: str = "", xmlns="http://www.w3.org/2000/svg", color: str = "currentColor", style: str ="", **kwargs):
    if not viewbox: viewbox = " ".join(map(str, icon["viewBox"]))
    additional_style = []
    if width: additional_style.append(f"max-width: {width}px")
    if color: additional_style.append(f"fill: {color}")
    if additional_style: style = f'{style}; {"; ".join(additional_style)}' if style else "; ".join(additional_style)
    style_attr = f' style="{style}"' if style else ''
    cls_attr = f' class="{cls}"' if cls else ''
    attrs = " ".join(f'{k}="{v}"' for k, v in kwargs.items())
    return HtmlNotStr(f'<svg xmlns="{xmlns}"{cls_attr}{style_attr} viewBox="{viewbox}"{attrs}><path d="{icon['path']}"/></svg>')

# %% ../nbs/00_core.ipynb 10
def _svgs(o): return {k:v for k,v in o.items()}

def _name(o):
    if o[0].isdigit(): o = "_"+o
    return o.replace("-","_")

svgs = dict2obj({_name(k):_svgs(v["svg"]) for k,v in icons.items()})

# %% ../nbs/00_core.ipynb 12
def _dims(o): return {k:(v["height"],v["width"]) for k,v in o.items()}

dims = dict2obj({_name(k):_dims(v["svg"]) for k,v in icons.items()})
